#Exercice 2 
#14 quanta in a terminal, theoretical release p=0.1
#Test result is 8. Probability=?
#What is the probability if it was p=0.7  
import matplotlib.pyplot as plt
from scipy.stats import binom

# Parameters
n = 14       # number of quanta
p = 0.1      # probability of release per quantum

# Possible outcomes: 0 to 10 quanta released
k_values = list(range(n + 1))
probabilities = binom.pmf(k_values, n, p)

# Display probabilities
for k, prob in zip(k_values, probabilities):
    print(f"P({k} quanta released) = {prob:.4f}")

# Optional: plot the distribution
plt.bar(k_values, probabilities, color='skyblue', edgecolor='black')
plt.title('Binomial Distribution of Quanta Release')
plt.xlabel('Number of Quanta Released')
plt.ylabel('Probability')
plt.xticks(k_values)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
#chances are null for 8q release if p=0.1,
#What if p=0.7?
import matplotlib.pyplot as plt
from scipy.stats import binom

# Parameters
n = 14       # number of quanta
p = p_values = np.arange(0.0, 1.01, 0.1) # probability of release per quantum

# Possible outcomes: 0 to 10 quanta released
k_values = np.arange(0, n + 1)

# Create plots
plt.figure(figsize=(12, 8))

for p in p_values:
    probabilities = binom.pmf(k_values, n, p)
    plt.plot(k_values, probabilities, marker='o', label=f'p = {p:.1f}')

plt.title('Binomial Distribution for Different p Values (n = 10)')
plt.xlabel('Number of Quanta Released (k)')
plt.ylabel('Probability P(k)')
plt.xticks(k_values)
plt.legend(title='Release Probability (p)', loc='upper right')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

#Most likely real p value is between 0.4 and 0.7
